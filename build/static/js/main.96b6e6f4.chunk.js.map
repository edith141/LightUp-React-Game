{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAround","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","setRcEasy","x","y","setState","hasWon","nrows","ncols","board","createBoard","setRcHard","state","i","row","j","push","Math","random","chanceLightStartsOn","console","log","coord","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","flip","every","col","_this2","htmlBoard","_loop","crd","concat","src_Cell_0","key","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96b6e6f4.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAround();\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\nimport './neonBtn.css'\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  static defaultProps = {\n    nrows: 2,\n    ncols: 2,\n    chanceLightStartsOn: 0.2\n  };\n\n  constructor(props) {\n    super(props);\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      nrows: this.props.nrows,\n      ncols: this.props.ncols,\n      board: this.createBoard(this.props.nrows, this.props.ncols)\n    };\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  setRcEasy = (x,y) => {\n    this.setState({\n      hasWon: false,\n      nrows: 2,\n      ncols: 2,\n      board: this.createBoard(2,2)\n    });\n    \n  }\n\n  setRcHard = (x,y) => {\n    this.setState({\n      hasWon: false,\n      nrows: 5,\n      ncols: 5,\n      board: this.createBoard(5,5)\n    });\n    \n  }\n\n  createBoard(x,y) {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let i=0; i< x; i++) {\n      let row = [];\n      for (let j=0; j< y; j++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n        console.log(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    console.log('new voard');\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let ncols = this.state.ncols;\n    let nrows = this.state.nrows;\n    let board = this.state.board;\n    let [i, j] = coord.split(\"_\").map(Number);\n    // console.log(`flippin' ${coord}`);\n\n      // if this coord is actually on board, flip it\n\n    function flip (i,j) {\n      if (j >= 0 && j < ncols && i >= 0 && i < nrows) {\n        // since it a bool\n        board[i][j] = !board[i][j];\n        }\n      }\n    \n    flip(i,j);\n    flip(i, j-1);\n    flip(i, j+1);\n    flip(i-1, j);\n    flip(i+1, j);\n      console.log('wtf!');\n\n    let hasWon = board.every(row =>  row.every( col => !col));\n    console.log(hasWon);\n    this.setState({board: board, hasWon: hasWon});\n  }\n\n\n  render() {\n\n    if (this.state.hasWon) {\n      return (\n        <h3 className = \"Winner\">WINNER!</h3>\n      );\n    }\n\n    let htmlBoard = [];\n\n    for (let i=0; i<this.state.nrows; i++) {\n      let row = [];\n      for( let j=0; j< this.state.ncols; j++) {\n        let crd = `${i}_${j}`;\n        console.log(`${i}_${j}`)\n        row.push(<Cell key={crd} isLit={this.state.board[i][j]} \n        flipCellsAround = {() => this.flipCellsAround(crd)}/>);\n      }\n      htmlBoard.push(<tr key = {i}>{row}</tr>);\n    }\n\n    return(\n      <div>\n        <table className='Board'>\n          <tbody>\n            {htmlBoard}\n          </tbody>\n        </table>\n        <button className = \"neonBtn-easy\" onClick={this.setRcEasy}> Easy </button>\n        <button className = \"neonBtn-hrd\" onClick={this.setRcHard}> Hard </button>\n        <h5 className = \"Rules\" >Rules:<br></br>Light up all the cubes!<br></br>Clicking a cube toggles it and the adjacent neighbours.</h5>\n      </div>\n    );\n  \n  }\n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div>\n        <div>\n          <div className = \"title\">\n            <h4 className=\"neon\">Light</h4>\n            <h4 className=\"flux\">UP!</h4>\n          </div>  \n        </div>\n        <div className='App'>\n          <Board/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}